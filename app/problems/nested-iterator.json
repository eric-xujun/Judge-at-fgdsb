{
    "name": "Nested List Iterator",
    "id": "nested-iterator",
    "discuss_link": "http://www.evanhoffman.com/evan/2010/04/17/code-to-flatten-a-list-in-java-with-and-without-recursion/",
    "desc": "<p>assume you have a list of objects, some of which may be lists of arbitrary depths. Write a function to return the list “flattened,” so sublists are all in the “main” list. I solved it recursively pretty easily, but it took some thought to do it without recursion.</p>\n<p>1. recursion</p>\n<p>2. nested iterator</p>\n<p>3. dfs</p>",
    "difficulty": "Hard",
    "source": "Google",
    "time": "2015-07-20 16:17:53",
    "tags": [
        "Linked List"
    ],
    "code_cpp": "",
    "code_java": "public class NestedList {\n \n    public static List<Object> flattenList(List<Object> inList) {\n        List<Object> newList = new LinkedList<Object>();\n\n        for (Object i : inList) {\n                // If it's not a list, just add it to the return list.\n                if (!(i instanceof List)) {\n                        newList.add(i);\n                } else {\n                        // It's a list, so add each item to the return list.\n                        newList.addAll(flattenList((List<Object>)i));\n                }\n        }\n\n        return newList;\n    }\n}",
    "code_ruby": "",
    "code_python": "",
    "code_lua": "",
    "code_scala": "",
    "in_type_cpp": [
        ""
    ],
    "ret_type_cpp": "",
    "out_type_cpp": "",
    "judge_type_cpp": "equal",
    "in_type_java": [
        ""
    ],
    "ret_type_java": "",
    "out_type_java": "",
    "judge_type_java": "equal",
    "judge_type_ruby": "equal",
    "judge_type_python": "equal",
    "judge_type_lua": "equal",
    "judge_call": "function(@)"
}